# This has been largely adapted from:
# https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob;f=compiler/cpp/src/thrifty.yy;hb=HEAD

class Rift::Generated::Parser < Rift::Generated::Tokenizer

rule

  program
    : header_list definition_list

  # This captured doc text is not currently used.
  capture_doc_text
    : /* empty */ {
      unless @doc_text.nil?
        result = @doc_text
        clear_doc_text_candidate
      end
    }

  destroy_doc_text
    : /* empty */ {
      clear_doc_text_candidate
    }

  header_list
    : header_list destroy_doc_text header {
      @nodes.push(val[2])
    }
    | /* empty */

  header
    : include
    | NAMESPACE IDENTIFIER IDENTIFIER {
      result = Rift::Nodes::Namespace.new(val[1], val[2])
    }
    | NAMESPACE '*' IDENTIFIER {
      result = Rift::Nodes::Namespace.new("*", val[2])
    }
    | CPP_INCLUDE LITERAL {
      result = Rift::Nodes::CppInclude.new(val[1])
    }

  include
    : INCLUDE LITERAL {
      result = Rift::Nodes::Include.new(val[1])
    }

  definition_list
    : definition_list capture_doc_text definition {
      @nodes.push(val[2])
    }
    | /* empty */

  definition
    : const | type_definition | service

  type_definition
    : typedef | enum | senum | struct | exception

  typedef
    : TYPEDEF field_type IDENTIFIER type_annotations comma_or_semicolon_optional {
      result = Rift::Nodes::Typedef.new(val[1], val[2])
      result.annotations = val[3]
    }

  enum
    : ENUM IDENTIFIER '{' enum_def_list '}' type_annotations {
      result = val[3]
      result.name = val[1]
      result.annotations = val[5]
    }

  enum_def_list
    : enum_def_list enum_def {
      result = val[0]
      result.values.push(val[1])
    }
    | /* empty */ {
      result = Rift::Nodes::Enum.new
    }

  enum_def
    : capture_doc_text enum_value type_annotations comma_or_semicolon_optional {
      result = val[1]
      result.annotations = val[2]
    }

  enum_value
    : IDENTIFIER '=' CONSTANT_INT {
      result = Rift::Nodes::EnumValue.new(val[0], val[2])
    }
    | IDENTIFIER {
      result = Rift::Nodes::EnumValue.new(val[0])
    }

  const
    : CONST field_type IDENTIFIER '=' const_value comma_or_semicolon_optional {
      result = Rift::Nodes::Const.new(val[1], val[2], val[4])
    }

  const_value
    : CONSTANT_INT {
      result = Rift::Nodes::ConstValue.new(val[0])
    }
    | CONSTANT_DOUBLE {
      result = Rift::Nodes::ConstValue.new(val[0])
    }
    | LITERAL {
      result = Rift::Nodes::ConstValue.new(val[0])
    }
    | IDENTIFIER {
      result = Rift::Nodes::ConstValue.new(val[0], true)
    }
    | const_list
    | const_map

  const_list
    : '[' const_list_contents ']' {
      result = Rift::Nodes::ConstValue.new(val[1])
    }

  const_list_contents
    : const_list_contents const_value comma_or_semicolon_optional {
      result = val[0]
      result.push(val[1])
    }
    | /* empty */ {
      result = []
    }

  const_map
    : '{' const_map_contents '}' {
      result = Rift::Nodes::ConstValue.new(val[1])
    }

  const_map_contents
    : const_map_contents const_value ':' const_value comma_or_semicolon_optional {
      result = val[0]
      result.store(val[1], val[3])
    }
    | /* empty */ {
      result = {}
    }

  struct_head
    : STRUCT {
      result = Rift::Nodes::Struct::TYPE_STRUCT
    }
    | UNION {
      result = Rift::Nodes::Struct::TYPE_UNION
    }

  struct
    : struct_head IDENTIFIER xsd_all '{' field_list '}' type_annotations {
      result = Rift::Nodes::Struct.new
      result.type = val[0]
      result.name = val[1]
      result.xsd_all = val[2]
      result.members = val[4]
      result.annotations = val[6]
    }

  xsd_all
    : XSD_ALL {
      result = true
    }
    | /* empty */ {
      result = false
    }

  xsd_optional
    : XSD_OPTIONAL {
      result = true
    }
    | /* empty */ {
      result = false
    }

  xsd_nillable
    : XSD_NILLABLE {
      result = true
    }
    | /* empty */ {
      result = false
    }

  xsd_attributes
    : XSD_ATTRIBUTES '{' field_list '}' {
      result = val[2]
    }
    | /* empty */ {
      result = nil
    }

  exception
    : EXCEPTION IDENTIFIER '{' field_list '}' type_annotations {
      result = Rift::Nodes::Exception.new(val[1], val[3])
      result.annotations = val[5]
    }

  service
    : SERVICE IDENTIFIER extends '{' function_list '}' type_annotations {
      result = Rift::Nodes::Service.new(val[1], val[2], val[4])
      result.annotations = val[6]
    }

  extends
    : EXTENDS IDENTIFIER {
      result = val[1]
    }
    | /* empty */ {
      result = nil
    }

  function_list
    : function_list function {
      result = val[0]
      result.push(val[1])
    }
    | /* empty */ {
      result = []
    }

  function
    : capture_doc_text oneway function_type IDENTIFIER '(' field_list ')'
      throws type_annotations comma_or_semicolon_optional {
        result = Rift::Nodes::Function.new(val[2], val[3], val[5], val[1])
        result.exceptions = val[7]
        result.annotations = val[8]
      }

  oneway
    : ONEWAY {
      result = true
    }
    | /* empty */ {
      result = false
    }

  throws
    : THROWS '(' field_list ')' {
      result = val[2]
    }
    | /* empty */ {
      result = []
    }

  field_list
    : field_list field {
      result = val[0]
      result.push(val[1])
    }
    | /* empty */ {
      reset_field_identifier_value
      result = []
    }

  field
    : capture_doc_text field_identifier field_requiredness field_type field_reference IDENTIFIER
      field_value xsd_optional xsd_nillable xsd_attributes type_annotations comma_or_semicolon_optional {
        result = Rift::Nodes::Field.new(val[3], val[5], val[1], val[6])
        result.reference = val[4]
        result.requiredness = val[2]
        result.xsd_optional = val[7]
        result.xsd_nillable = val[8]
        result.xsd_attributes = val[9]
        result.annotations = val[10]
      }

  field_identifier
    : CONSTANT_INT ':' {
      result = Rift::Nodes::FieldIdentifier.new(val[0])
    }
    | /* empty */ {
      value = gen_field_identifier_value
      result = Rift::Nodes::FieldIdentifier.new(value, true)
    }

  field_reference
    : REFERENCE {
      result = true
    }
    | /* empty */ {
      result = false
    }

  field_requiredness
    : REQUIRED {
      result = Rift::Nodes::Field::REQUIREDNESS_REQUIRED
    }
    | OPTIONAL {
      result = Rift::Nodes::Field::REQUIREDNESS_OPTIONAL
    }
    | /* empty */ {
      result = Rift::Nodes::Field::REQUIREDNESS_OPT_IN_REQ_OUT
    }

  field_value
    : '=' const_value {
      result = val[1]
    }
    | /* empty */ {
      result = nil
    }

  function_type
    : field_type | VOID

  field_type
    : IDENTIFIER {
      type = Rift::Nodes::FieldType::TYPE_USER_DEFINED
      result = Rift::Nodes::FieldType.new(type, val[0])
    }
    | base_type {
      type = Rift::Nodes::FieldType::TYPE_PRIMITIVE
      result = Rift::Nodes::FieldType.new(type, val[0])
    }
    | container_type {
      type = Rift::Nodes::FieldType::TYPE_PRIMITIVE
      result = Rift::Nodes::FieldType.new(type, val[0])
    }

  base_type
    : simple_base_type type_annotations {
      result = Rift::Nodes::BaseType.new(val[0])
      result.annotations = val[1]
    }

  simple_base_type
    : STRING {
      result = Rift::Nodes::BaseType::TYPE_STRING
    }
    | BINARY {
      result = Rift::Nodes::BaseType::TYPE_BINARY
    }
    | BOOL {
      result = Rift::Nodes::BaseType::TYPE_BOOL
    }
    | I8 {
      result = Rift::Nodes::BaseType::TYPE_I8
    }
    | I16 {
      result = Rift::Nodes::BaseType::TYPE_I16
    }
    | I32 {
      result = Rift::Nodes::BaseType::TYPE_I32
    }
    | I64 {
      result = Rift::Nodes::BaseType::TYPE_I64
    }
    | DOUBLE {
      result = Rift::Nodes::BaseType::TYPE_DOUBLE
    }

  container_type
    : simple_container_type type_annotations {
      result = val[0]
      result.annotations = val[1]
    }

  simple_container_type
    : map_type | set_type | list_type

  map_type
    : MAP cpp_type '<' field_type ',' field_type '>' {
      result = Rift::Nodes::MapType.new(val[3], val[5])
      result.cpp_name = val[1]
    }

  set_type
    : SET cpp_type '<' field_type '>' {
      result = Rift::Nodes::SetType.new(val[3])
      result.cpp_name = val[1]
    }

  list_type
    : LIST cpp_type '<' field_type '>' {
      result = Rift::Nodes::ListType.new(val[3])
      result.cpp_name = val[1]
    }

  cpp_type
    : CPP_TYPE LITERAL {
      result = val[1]
    }
    | /* empty */ {
      result = nil
    }

  type_annotations
    : '(' type_annotations_list ')' {
      result = val[1]
    }
    | /* empty */ {
      result = nil
    }

  type_annotations_list
    : type_annotations_list type_annotation {
      annotation = val[1]
      result.store(annotation[0], annotation[1])
    }
    | /* empty */ {
      result = {}
    }

  type_annotation
    : IDENTIFIER type_annotation_value comma_or_semicolon_optional {
      result = [val[0], val[1]]
    }

  type_annotation_value
    : '=' LITERAL {
      result = val[1]
    }
    | /* empty */ {
      result = 1
    }

  comma_or_semicolon_optional
    : ','
    | ';'
    | /* empty */
end

----- header -----

require "rift/generated/tokenizer"

----- inner -----

def clear_doc_text_candidate
  @doc_text = nil
end

def gen_field_identifier_value()
  @identifier_value -= 1
  @identifier_value
end

def reset_field_identifier_value()
  @identifier_value = 0
end